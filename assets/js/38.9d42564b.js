(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{529:function(e,t,a){"use strict";a.r(t);var s=a(13),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"前端算法入门一-刷算法题常用的js基础扫盲"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端算法入门一-刷算法题常用的js基础扫盲"}},[e._v("#")]),e._v(" 前端算法入门一：刷算法题常用的JS基础扫盲")]),e._v(" "),t("p",[e._v("此篇属于前端算法入门系列的第一篇，主要介绍常用的"),t("code",[e._v("数组方法")]),e._v("、"),t("code",[e._v("字符串方法")]),e._v("、"),t("code",[e._v("遍历方法")]),e._v("、"),t("code",[e._v("高阶函数")]),e._v("、"),t("code",[e._v("正则表达式")]),e._v("以及相关"),t("code",[e._v("数学知识")]),e._v("。")]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("文章主要包含以下内容：")])]),e._v(" "),t("ul",[t("li",[e._v("数组常用方法")]),e._v(" "),t("li",[e._v("字符串常用方法")]),e._v(" "),t("li",[e._v("常用遍历方法&高阶函数")]),e._v(" "),t("li",[e._v("常用正则表达式")]),e._v(" "),t("li",[e._v("数学知识")])])]),e._v(" "),t("h2",{attrs:{id:"一、数组常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、数组常用方法"}},[e._v("#")]),e._v(" 一、数组常用方法")]),e._v(" "),t("h3",{attrs:{id:"_1-push"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-push"}},[e._v("#")]),e._v(" 1.push()")]),e._v(" "),t("p",[e._v("在尾部追加，类似于压栈，原数组会变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\narr.push(8)\nconsole.log(arr) // [1, 2, 3, 8]\n")])])]),t("h3",{attrs:{id:"_2-pop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-pop"}},[e._v("#")]),e._v(" 2.pop()")]),e._v(" "),t("p",[e._v("在尾部弹出，类似于出栈，原数组会变。数组的 "),t("code",[e._v("push")]),e._v(" & "),t("code",[e._v("pop")]),e._v(" 可以模拟常见数据结构之一：栈。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconst popVal = arr.pop()\nconsole.log(popVal) // 3\nconsole.log(arr) // [1, 2]\n\n// 数组模拟常见数据结构之一：栈\nconst stack = [0, 1]\nstack.push(2) // 压栈\nconsole.log(stack) // [0, 1, 2]\n\nconst popValue = stack.pop() // 出栈\nconsole.log(popValue) // 2\nconsole.log(stack) // [0, 1]\n")])])]),t("h3",{attrs:{id:"_3-unshift"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-unshift"}},[e._v("#")]),e._v(" 3.unshift()")]),e._v(" "),t("p",[e._v("在头部压入数据，类似于入队，原数组会变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\narr.unshift(0)\nconsole.log(arr) // [0, 1, 2, 3]\n")])])]),t("h3",{attrs:{id:"_4-shift"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-shift"}},[e._v("#")]),e._v(" 4.shift()")]),e._v(" "),t("p",[e._v("在头部弹出数据，原数组会变。数组的 "),t("code",[e._v("push")]),e._v("（入队） & "),t("code",[e._v("shift")]),e._v("（出队） 可以模拟常见数据结构之一：队列。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconst shiftVal = arr.shift()\nconsole.log(shiftVal) // 1\nconsole.log(arr) // [2, 3]\n\n// 数组模拟常见数据结构之一：队列\nconst queue = [0, 1]\nqueue.push(2) // 入队\nconsole.log(queue) // [0, 1, 2]\n\nconst shiftValue = queue.shift() // 出队\nconsole.log(shiftValue) // 0\nconsole.log(queue) // [1, 2]\n")])])]),t("h3",{attrs:{id:"_5-concat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-concat"}},[e._v("#")]),e._v(" 5.concat()")]),e._v(" "),t("p",[t("code",[e._v("concat")]),e._v("会在当前数组尾部拼接传入的数组，然后返回一个新数组，原数组不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconst arr2 = arr.concat([7, 8, 9])\nconsole.log(arr) // [1, 2, 3]\nconsole.log(arr2) // [1, 2, 3, 7, 8, 9]\n")])])]),t("h3",{attrs:{id:"_6-indexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-indexof"}},[e._v("#")]),e._v(" 6.indexOf()")]),e._v(" "),t("p",[e._v("在数组中寻找该值，找到则返回其下标，找不到则返回"),t("code",[e._v("-1")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconsole.log(arr.indexOf(2)) // 1\nconsole.log(arr.indexOf(0)) // -1\n")])])]),t("h3",{attrs:{id:"_7-includes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-includes"}},[e._v("#")]),e._v(" 7.includes()")]),e._v(" "),t("p",[e._v("在数组中寻找该值，找到则返回"),t("code",[e._v("true")]),e._v("，找不到则返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconsole.log(arr.includes(2)) // true\nconsole.log(arr.includes(4)) // false\n")])])]),t("h3",{attrs:{id:"_8-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-join"}},[e._v("#")]),e._v(" 8.join()")]),e._v(" "),t("p",[e._v("将数组转化成字符串，并返回该字符串，不传值则默认逗号隔开，原数组不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconsole.log(arr.join()) // ‘1, 2, 3’\nconsole.log(arr) // [1, 2, 3]\n")])])]),t("h3",{attrs:{id:"_9-reverse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-reverse"}},[e._v("#")]),e._v(" 9.reverse()")]),e._v(" "),t("p",[e._v("翻转原数组，并返回已完成翻转的数组，原数组改变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconsole.log(arr.reverse()) // [3, 2, 1]\nconsole.log(arr) // [3, 2, 1]\n")])])]),t("h3",{attrs:{id:"_10-slice-start-end"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-slice-start-end"}},[e._v("#")]),e._v(" 10.slice(start，end)")]),e._v(" "),t("p",[e._v("从"),t("code",[e._v("start")]),e._v(" 开始截取到"),t("code",[e._v("end")]),e._v("，但是不包括"),t("code",[e._v("end")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3, 4, 5]\nconsole.log(arr.slice(1, 4)) // [2, 3, 4]\nconsole.log(arr) // [1, 2, 3, 4, 5]\n")])])]),t("h3",{attrs:{id:"_11-splice-start-deletecount-item1-item2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-splice-start-deletecount-item1-item2"}},[e._v("#")]),e._v(" 11.splice(start, deleteCount, item1, item2……)")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("start")]),e._v("参数 开始的位置")]),e._v(" "),t("li",[t("code",[e._v("deleteCount")]),e._v("要截取的个数")]),e._v(" "),t("li",[e._v("后面的"),t("code",[e._v("items")]),e._v("为要添加的元素")]),e._v(" "),t("li",[e._v("如果"),t("code",[e._v("deleteCount")]),e._v("为"),t("code",[e._v("0")]),e._v("，则表示不删除元素，从"),t("code",[e._v("start")]),e._v("位置开始添加后面的几个元素到原始的数组里面。")]),e._v(" "),t("li",[e._v("返回值为由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。")]),e._v(" "),t("li",[e._v("这个方法会改变原始数组，数组的长度会发生变化")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const arr3 = [1, 2, 3, 4, 5, 6, 7, "f1", "f2"];\nconst arr4 = arr3.splice(2, 3) // 删除第三个元素以后的三个数组元素(包含第三个元素)\nconsole.log(arr4); // [3, 4, 5];\nconsole.log(arr3); // [1, 2, 6, 7, "f1", "f2"]; 原始数组被改变\n\nconst arr5 = arr3.splice(2, 0, "wu", "leon"); \n// 从第2位开始删除0个元素，插入"wu","leon"\nconsole.log(arr5); // [] 返回空数组\nconsole.log(arr3); // [1, 2, "wu", "leon", 6, 7, "f1", "f2"]; 原始数组被改变\n\nconst arr6 = arr3.splice(2, 3, "xiao", "long");\n// 从第 2 位开始删除 3 个元素，插入"xiao", "long"\nconsole.log(arr6); // ["wu", "leon", 6]\nconsole.log(arr3); //[ 1, 2, "xiao", "long", 7, "f1", "f2"]\n\nconst arr7 = arr3.splice(2); // 从第三个元素开始删除所有的元素\nconsole.log(arr7);// ["xiao", "long", 7, "f1", "f2"]\nconsole.log(arr3); // [1, 2]\n')])])]),t("h3",{attrs:{id:"_12-sort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-sort"}},[e._v("#")]),e._v(" 12.sort()")]),e._v(" "),t("ul",[t("li",[e._v("对数组的元素进行排序，并返回数组。")]),e._v(" "),t("li",[e._v("默认排序顺序是在将元素转换为字符串，然后比较它们的"),t("code",[e._v("UTF-16")]),e._v("代码单元值序列时构建的。")]),e._v(" "),t("li",[e._v("由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。")])]),e._v(" "),t("p",[e._v("可参考 "),t("strong",[e._v("MDN：Sort")]),e._v("[5]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\narr.sort((a, b) => b - a)\nconsole.log(arr) // [3, 2, 1]\n")])])]),t("h3",{attrs:{id:"_13-tostring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-tostring"}},[e._v("#")]),e._v(" 13.toString()")]),e._v(" "),t("p",[e._v("将数组转化成字符串，并返回该字符串，逗号隔开，原数组不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3, 4, 5]\nconsole.log(arr.toString()) // ‘1, 2, 3, 4, 5’\nconsole.log(arr) // [1, 2, 3, 4, 5]\n")])])]),t("h2",{attrs:{id:"二、字符串常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、字符串常用方法"}},[e._v("#")]),e._v(" 二、字符串常用方法")]),e._v(" "),t("h3",{attrs:{id:"_1-charat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-charat"}},[e._v("#")]),e._v(" 1.charAt()")]),e._v(" "),t("p",[e._v("返回指定索引位置处的字符。类似于数组用中括号获取相应下标位置的数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var str = 'abcdefg'\nconsole.log(str.charAt(2)) // 输出 'c' \nconsole.log(str[2]) // 输出 'c'\n")])])]),t("h3",{attrs:{id:"_2-concat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-concat"}},[e._v("#")]),e._v(" 2.concat()")]),e._v(" "),t("p",[e._v("类似数组的concat()，用来返回一个合并拼接两个或两个以上字符串。原字符串不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str1 = 'abcdefg'\nconst str2 = '1234567'\nconst str3 = str1.concat(str2)\nconsole.log(str3) // 输出 'abcdefg1234567'\n")])])]),t("h3",{attrs:{id:"_3-indexof-、lastindexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-indexof-、lastindexof"}},[e._v("#")]),e._v(" 3.indexOf()、lastIndexOf()")]),e._v(" "),t("p",[t("code",[e._v("indexOf")]),e._v(",返回一个字符在字符串中首次出现的位置,"),t("code",[e._v("lastIndexOf")]),e._v("返回一个字符在字符串中最后一次出现的位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str = 'abcdcefcg'\nconsole.log(str.indexOf('c')) // 输出 '2'\nconsole.log(str.lastIndexOf('c')) // 输出 '7'\n")])])]),t("h3",{attrs:{id:"_4-slice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-slice"}},[e._v("#")]),e._v(" 4.slice()")]),e._v(" "),t("p",[e._v("提取字符串的片断，并把提取的字符串作为新的字符串返回出来。原字符串不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str = 'abcdefg'\nconsole.log(str.slice()) // 输出 'abcdefg', 不传递参数默认复制整个字符串\nconsole.log(str.slice(1)) // 输出 'bcdefg',传递一个，则为提取的起点，然后到字符串结尾\nconsole.log(str.slice(2, str.length-1)) // 输出'cdef',传递两个，为提取的起始点和结束点\n")])])]),t("h3",{attrs:{id:"_5-split"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-split"}},[e._v("#")]),e._v(" 5.split()")]),e._v(" "),t("p",[e._v("使用指定的分隔符将一个字符串拆分为多个子字符串数组并返回，原字符串不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const str = \'A*B*C*D*E*F*G\'\nconsole.log(str.split(\'*\')) // 输出 ["A", "B", "C", "D", "E", "F", "G"]\n')])])]),t("h3",{attrs:{id:"_6-substr-substring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-substr-substring"}},[e._v("#")]),e._v(" 6.substr(), substring()")]),e._v(" "),t("ul",[t("li",[e._v("这两个方法的功能都是截取一个字符串的片段，并返回截取的字符串。")]),e._v(" "),t("li",[t("code",[e._v("substr")]),e._v("和"),t("code",[e._v("substring")]),e._v("这两个方法不同的地方就在于参数二，"),t("code",[e._v("substr")]),e._v("的参数二是截取返回出来的这个字符串指定的长度，"),t("code",[e._v("substring")]),e._v("的参数二是截取返回这个字符串的结束点，并且不包含这个结束点。而它们的参数一，都是一样的功能，截取的起始位置。")]),e._v(" "),t("li",[t("strong",[e._v("注意事项")]),e._v("："),t("code",[e._v("substr")]),e._v("的参数二如果为"),t("code",[e._v("0")]),e._v("或者负数，则返回一个空字符串，如果未填入，则会截取到字符串的结尾去。"),t("code",[e._v("substring")]),e._v("的参数一和参数二为"),t("code",[e._v("NAN")]),e._v("或者负数，那么它将被替换为"),t("code",[e._v("0")]),e._v("。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str = 'ABCDEFGHIJKLMN'\nconsole.log(str.substr(2))  // 输出 'CDEFGHIJKLMN'\nconsole.log(str.substring(2)) // 输出 'CDEFGHIJKLMN'\n\nconsole.log(str.substr(2, 9))  // 输出 'CDEFGHIJK'\nconsole.log(str.substring(2, 9))  // 输出 'CDEFGHI'\n")])])]),t("h3",{attrs:{id:"_7-match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-match"}},[e._v("#")]),e._v(" 7.match()")]),e._v(" "),t("p",[t("code",[e._v("match()")]),e._v("方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，并返回一个包含该搜索结果的数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str = '2018年结束了，2019年开始了，2020年就也不远了'\nconst reg = /\\d+/g  // 这里是定义匹配规则，匹配字符串里的1到多个数字\nconsole.log(str.match(reg))  // 输出符合匹配规则的内容，以数组形式返回 ['2018', '2019', '2020']\nconsole.log(str.match('20'))  // 不使用正则 [\"20\", index: 0, input: \"2018年结束了，2019年开始了\"]\n")])])]),t("p",[t("strong",[e._v("注意事项")]),e._v(":如果"),t("code",[e._v("match")]),e._v("方法没有找到匹配，将返回"),t("code",[e._v("null")]),e._v("。如果找到匹配，则 "),t("code",[e._v("match")]),e._v("方法会把匹配到以数组形式返回，如果正则规则未设置全局修饰符"),t("code",[e._v("g")]),e._v("，则 "),t("code",[e._v("match")]),e._v("方法返回的数组有两个特性："),t("code",[e._v("input")]),e._v("和"),t("code",[e._v("index")]),e._v("。"),t("code",[e._v("input")]),e._v("属性包含整个被搜索的字符串。"),t("code",[e._v("index")]),e._v("属性包含了在整个被搜索字符串中匹配的子字符串的位置。")]),e._v(" "),t("h3",{attrs:{id:"_8-replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-replace"}},[e._v("#")]),e._v(" 8.replace()")]),e._v(" "),t("p",[t("code",[e._v("replace")]),e._v("接收两个参数，参数一是需要替换掉的字符或者一个正则的匹配规则，参数二，需要替换进去的字符，仔实际的原理当中，参数二，你可以换成一个回调函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str = '2018年结束了，2019年开始了，2020年就也不远了'\nconst rex = /\\d+/g  // 这里是定义匹配规则，匹配字符串里的1到多个数字\nconst str1 = str.replace(rex, '****') \nconsole.log(str1) // 输出：\"****年结束了，****年开始了,****年也不远了\"\nconst str2 = str.replace(rex, function(item){\n    console.log(arguments)  // 看下面的图片\n    const arr = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖']\n    let newStr = ''\n    item.split('').map(function(i){\n            newStr += arr[i]\n    })     \n    return newStr       \n})\nconsole.log(str2) // 输出：贰零壹捌年结束了，贰零壹玖年开始了,贰零贰零年也不远了\n")])])]),t("h3",{attrs:{id:"_9-search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-search"}},[e._v("#")]),e._v(" 9.search()")]),e._v(" "),t("p",[e._v("在目标字符串中搜索与正则规则相匹配的字符，搜索到，则返回第一个匹配项在目标字符串当中的位置，没有搜索到则返回一个"),t("code",[e._v("-1")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str = '2018年结束了，2019年开始了，2020年就也不远了'\nconst reg = /\\d+/i  // 这里是定义匹配规则,匹配字符串里的1到多个数字\nconsole.log(str.search(reg)) // 输出 0  这里搜索到的第一项是从位置0开始的\n")])])]),t("h3",{attrs:{id:"_10-tolowercase-touppercase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-tolowercase-touppercase"}},[e._v("#")]),e._v(" 10.toLowerCase(),toUpperCase()")]),e._v(" "),t("p",[t("code",[e._v("toLowerCase")]),e._v("把字母转换成小写，"),t("code",[e._v("toUpperCase()")]),e._v("则是把字母转换成大写。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str1 = 'abcdefg'\nconst str2 = 'ABCDEFG'\nconsole.log(str2.toLowerCase())  // 输出：'abcdefg'\nconsole.log(str1.toUpperCase())  // 输出：'ABCDEFG'\n")])])]),t("h3",{attrs:{id:"_11-includes-startswith-endswith"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-includes-startswith-endswith"}},[e._v("#")]),e._v(" 11.includes(), startsWith(), endsWith()")]),e._v(" "),t("p",[t("code",[e._v("includes")]),e._v("、"),t("code",[e._v("startsWith")]),e._v("、"),t("code",[e._v("endsWith")]),e._v("，"),t("code",[e._v("es6")]),e._v("的新增方法，"),t("code",[e._v("includes")]),e._v(" 用来检测目标字符串对象是否包含某个字符，返回一个布尔值，"),t("code",[e._v("startsWith")]),e._v("用来检测当前字符是否是目标字符串的起始部分，相对的"),t("code",[e._v("endwith")]),e._v("是用来检测是否是目标字符串的结尾部分。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str = 'Excuse me, how do I get to park road?'\nconsole.log(str.includes('how')) // 输出：true\nconsole.log(str.startsWith('Excuse')) // 输出： true\nconsole.log(str.endsWith('?')) // 输出： true\n")])])]),t("h3",{attrs:{id:"_12-repeat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-repeat"}},[e._v("#")]),e._v(" 12.repeat()")]),e._v(" "),t("p",[e._v("返回一个新的字符串对象，新字符串等于重复了指定次数的原始字符串。接收一个参数，就是指定重复的次数。原字符串不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const str = 'http'\nconst str2 = str.repeat(3)\nconsole.log(str) // 输出：'http'\nconsole.log(str2) // 输出：'httphttphttp'\n")])])]),t("h2",{attrs:{id:"三、常用遍历方法-高阶函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、常用遍历方法-高阶函数"}},[e._v("#")]),e._v(" 三、常用遍历方法&高阶函数")]),e._v(" "),t("h3",{attrs:{id:"_1-for"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-for"}},[e._v("#")]),e._v(" 1.for()")]),e._v(" "),t("p",[e._v("最常用的"),t("code",[e._v("for")]),e._v("循环，经常用的数组遍历，也可以遍历字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconst str = 'abc'\nfor (let i = 0; i < arr.length; i++) {\n    console.log(arr[i])\n    console.log(str[i])\n}\n")])])]),t("h3",{attrs:{id:"_2-while-do-while"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-while-do-while"}},[e._v("#")]),e._v(" 2.while() / do while()")]),e._v(" "),t("p",[t("code",[e._v("while")]),e._v("、"),t("code",[e._v("do while")]),e._v("主要的功能是，当满足"),t("code",[e._v("while")]),e._v("后边所跟的条件时，来执行相关业务。这两个的区别是，"),t("code",[e._v("while")]),e._v("会先判断是否满足条件，然后再去执行花括号里面的任务，而"),t("code",[e._v("do while")]),e._v("则是先执行一次花括号中的任务，再去执行"),t("code",[e._v("while")]),e._v("条件，判断下次还是否再去执行"),t("code",[e._v("do")]),e._v("里面的操作。也就是说 "),t("strong",[e._v("do while至少会执行一次操作")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("while(条件){\n     执行...\n}\n------------\ndo{\n    执行...\n}\nwhile(条件)\n")])])]),t("h3",{attrs:{id:"_3-foreach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-foreach"}},[e._v("#")]),e._v(" 3.forEach()")]),e._v(" "),t("p",[e._v("拷贝一份遍历原数组。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("return")]),e._v("无法终止循环。不过可以起到"),t("code",[e._v("continue")]),e._v("效果。")]),e._v(" "),t("li",[e._v("本身是不支持的"),t("code",[e._v("continue")]),e._v("与"),t("code",[e._v("break")]),e._v("语句的我们可以通过"),t("code",[e._v("some")]),e._v("和 "),t("code",[e._v("every")]),e._v("来实现。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [5,1,3,7,4]\narr.forEach((item, index) => {\n    if (item < 2) return\n    console.log(`索引：${index}，数值：${item}`)\n    arr[5] = 0\n})\nconsole.log(arr)\n// 打印结果：\n// 索引：0，数值：5\n// 索引：2，数值：3\n// 索引：3，数值：7\n// 索引：4，数值：4\n// [5, 1, 3, 7, 4, 0]\n")])])]),t("h3",{attrs:{id:"_4-for-in"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-for-in"}},[e._v("#")]),e._v(" 4.for...in")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("for...in")]),e._v(" 是 ES5 标准， 此方法遍历数组效率低，主要是用来循环遍历对象的属性。")]),e._v(" "),t("li",[e._v("遍历数组的缺点：数组的下标"),t("code",[e._v("index")]),e._v("值是数字，"),t("code",[e._v("for-in")]),e._v("遍历的"),t("code",[e._v("index")]),e._v("值"),t("code",[e._v('"0","1","2"')]),e._v("等是字符串。")]),e._v(" "),t("li",[t("code",[e._v("Object.defineProperty")]),e._v("，建立的属性，默认不可枚举。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const foo = {\n    name: 'bar',\n    sex: 'male'\n}\nObject.defineProperty(foo, \"age\", { value : 18 })\nfor(const key in foo){\n    console.log(`可枚举属性：${key}`)\n}\nconsole.log(`age属性：${foo.age}`)\n// 打印结果：\n// 可枚举属性：name\n// 可枚举属性：sex\n// age属性：18\n")])])]),t("h3",{attrs:{id:"_5-for-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-for-of"}},[e._v("#")]),e._v(" 5.for...of")]),e._v(" "),t("p",[t("code",[e._v("for…of")]),e._v("是"),t("code",[e._v("ES6")]),e._v("新增的方法，但是"),t("code",[e._v("for…of")]),e._v("不能去遍历普通的对象，"),t("strong",[t("code",[e._v("for…of")]),e._v("的好处是可以使用"),t("code",[e._v("break")]),e._v("跳出循环。")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("for-of")]),e._v("这个方法避开了"),t("code",[e._v("for-in")]),e._v("循环的所有缺陷")]),e._v(" "),t("li",[e._v("与"),t("code",[e._v("forEach()")]),e._v("不同的是，它可以正确响应"),t("code",[e._v("break")]),e._v("、"),t("code",[e._v("continue")]),e._v("和"),t("code",[e._v("return")]),e._v("语句")]),e._v(" "),t("li",[t("code",[e._v("for-of")]),e._v("循环不仅支持数组，还支持大多数类数组对象，例如"),t("code",[e._v("DOM")]),e._v(" "),t("strong",[e._v("NodeList对象")]),e._v("[6]。")]),e._v(" "),t("li",[t("code",[e._v("for-of")]),e._v("循环也支持字符串遍历")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// for of 循环直接得到的就是值\nconst arr = [1, 2, 3]\nfor (const value of arr) {\n console.log(value)\n}\n")])])]),t("p",[t("strong",[e._v("面试官：说一下 for...in 和 for...of 区别？")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("（1）for…in 用于可枚举数据，如对象、数组、字符串\n（2）for…of 用于可迭代数据，如数组、字符串、Map、Set\n")])])]),t("h3",{attrs:{id:"_6-every-some"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-every-some"}},[e._v("#")]),e._v(" 6.every / some")]),e._v(" "),t("p",[t("strong",[e._v("返回一个布尔值")]),e._v("。当我们需要判定数组中的元素是否满足某些条件时，可以使用"),t("code",[e._v("every")]),e._v(" / "),t("code",[e._v("some")]),e._v("。这两个的区别是，"),t("code",[e._v("every")]),e._v("会去判断判断数组中的每一项，而 "),t("code",[e._v("some")]),e._v("则是当某一项满足条件时返回。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// every\nconst foo = [5,1,3,7,4].every((item, index) => {\n    console.log(`索引：${index}，数值：${item}`)\n    return item > 2\n})\nconsole.log(foo)\n// every 打印：\n// 索引：0，数值：5\n// 索引：1，数值：1\n// false\n// some\nconst foo = [5,1,3,7,4].some((item, index) => {\n    console.log(`索引：${index}，数值：${item}`)\n    return item > 2\n})\nconsole.log(foo)\n// some 打印：\n// 索引：0，数值：5\n// true\n")])])]),t("h3",{attrs:{id:"_7-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-filter"}},[e._v("#")]),e._v(" 7.filter()")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("filter")]),e._v("方法用于过滤数组成员，满足条件的成员组成一个新数组返回。")]),e._v(" "),t("li",[e._v("它的参数是一个函数，所有数组成员依次执行该函数，返回结果为"),t("code",[e._v("true")]),e._v("的成员组成一个新数组返回。")]),e._v(" "),t("li",[e._v("该方法不会改变原数组。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const foo = [5,1,3,7,4].filter((item,index) => {\n    console.log(`索引：${index}，数值：${item}`)\n    return item > 2\n})\nconsole.log(foo)\n// 打印结果：\n// 索引：0，数值：5\n// 索引：1，数值：1\n// 索引：2，数值：3\n// 索引：3，数值：7\n// 索引：4，数值：4\n// [5, 3, 7, 4]\n")])])]),t("h3",{attrs:{id:"_8-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-map"}},[e._v("#")]),e._v(" 8.map()")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("map")]),e._v("即是 “映射”的意思 ，原数组被“映射”成对应新数组。")]),e._v(" "),t("li",[t("code",[e._v("map：")]),e._v("支持"),t("code",[e._v("return")]),e._v("，相当与原数组克隆了一份，把克隆的每项改变了，也不影响原数组。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const foo = [5,1,3,7,4].map((item,index) => {\n    console.log(`索引：${index}，数值：${item}`)\n    return item + 2\n})\nconsole.log(foo)\n// 打印结果：\n// 索引：0，数值：5\n// 索引：1，数值：1\n// 索引：2，数值：3\n// 索引：3，数值：7\n// 索引：4，数值：4\n// [7, 3, 5, 9, 6]\n")])])]),t("h3",{attrs:{id:"_9-reduce-reduceright"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-reduce-reduceright"}},[e._v("#")]),e._v(" 9. reduce() / reduceRight()")]),e._v(" "),t("p",[t("code",[e._v("reduce")]),e._v(" 从左到右将数组元素做“叠加”处理，返回一个值。"),t("code",[e._v("reduceRight")]),e._v(" 从右到左。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const foo = [5,1,3,7,4].reduce((total, cur) => {\n    console.log(`叠加：${total}，当前：${cur}`)\n    return total + cur\n})\nconsole.log(foo)\n// 打印结果：\n// 叠加：5，当前：1\n// 叠加：6，当前：3\n// 叠加：9，当前：7\n// 叠加：16，当前：4\n// 20\n")])])]),t("h3",{attrs:{id:"_10-object-keys遍历对象的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-object-keys遍历对象的属性"}},[e._v("#")]),e._v(" 10.Object,keys遍历对象的属性")]),e._v(" "),t("p",[t("code",[e._v("Object.keys")]),e._v("方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名，且只返回可枚举的属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const obj = {\n  p1: 123,\n  p2: 456\n};\nObject.keys(obj) // ["p1", "p2"]\n')])])]),t("h3",{attrs:{id:"_11-object-getownpropertynames-遍历对象的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-object-getownpropertynames-遍历对象的属性"}},[e._v("#")]),e._v(" 11.Object.getOwnPropertyNames() 遍历对象的属性")]),e._v(" "),t("p",[t("code",[e._v("Object.getOwnPropertyNames")]),e._v("方法与"),t("code",[e._v("Object.keys")]),e._v("类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但它能返回不可枚举的属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const arr = [\'Hello\', \'World\'];\nObject.keys(arr) // ["0", "1"]\nObject.getOwnPropertyNames(arr) // ["0", "1", "length"]\n')])])]),t("h3",{attrs:{id:"以上遍历方法的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#以上遍历方法的区别"}},[e._v("#")]),e._v(" 以上遍历方法的区别：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("一：map()，forEach()，filter()循环的共同之处：\n  1.forEach，map，filter循环中途是无法停止的，总是会将所有成员遍历完。\n  2.他们都可以接受第二个参数，用来绑定回调函数内部的 this 变量，将回调函数内部的 this 对象，指向第二个参数，间接操作这个参数（一般是数组）。\n\n二：map()、filter()循环和forEach()循环的不同：\n   forEach 循环没有返回值；map，filter 循环有返回值。\n\n三：map()和filter()都会跳过空位，for 和 while 不会\n\n四：some()和every():\n   some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.\n\n五：reduce()，reduceRight()：\n   reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员）。\n\n六：Object对象的两个遍历 Object.keys 与 Object.getOwnPropertyNames：\n   他们都是遍历对象的属性，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但Object.keys不能返回不可枚举的属性；Object.getOwnPropertyNames能返回不可枚举的属性。\n")])])]),t("h2",{attrs:{id:"四、常用正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、常用正则表达式"}},[e._v("#")]),e._v(" 四、常用正则表达式")]),e._v(" "),t("p",[e._v("这里罗列一些我在刷算法题中遇到的正则表达式，如果有时间可认真学一下"),t("strong",[e._v("正则表达式不要背")]),e._v("[7]。")]),e._v(" "),t("h3",{attrs:{id:"_1-判断字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-判断字符"}},[e._v("#")]),e._v(" 1.判断字符")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("由26个英文字母组成的字符串：^[A-Za-z]+$\n由26个大写英文字母组成的字符串：^[A-Z]+$\n由26个小写英文字母组成的字符串：^[a-z]+$\n由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$\n")])])]),t("h3",{attrs:{id:"_2-判断数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-判断数字"}},[e._v("#")]),e._v(" 2.判断数字")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("数字：^[0-9]*$\n")])])]),t("p",[e._v("持续更新，敬请期待……")]),e._v(" "),t("h2",{attrs:{id:"五、数学知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、数学知识"}},[e._v("#")]),e._v(" 五、数学知识")]),e._v(" "),t("h3",{attrs:{id:"_1-质数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-质数"}},[e._v("#")]),e._v(" 1.质数")]),e._v(" "),t("p",[e._v("若一个正整数无法被除了"),t("code",[e._v("1")]),e._v(" 和它自身之外的任何自然数整除，则称该数为质数（或素数），否则称该正整数为合数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function judgePrime(n) {\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n")])])]),t("h3",{attrs:{id:"_2-斐波那契数列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-斐波那契数列"}},[e._v("#")]),e._v(" 2.斐波那契数列")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Fibonacci(n) {\n    if (n <= 1) return n  \n    return Fibonacci(n - 1) + Fibonacci(n - 2)\n}\n")])])]),t("p",[e._v("持续更新，敬请期待……")]),e._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("JavaScript 之字符串常用方法")]),e._v("[8]")]),e._v(" "),t("li",[t("strong",[e._v("JavaScript 循环遍历大全")]),e._v("[9]")]),e._v(" "),t("li",[t("strong",[e._v("刷算法题必备的数学考点汇总")]),e._v("[10]")])])])}),[],!1,null,null,null);t.default=r.exports}}]);